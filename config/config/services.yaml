# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    jms_serializer.camel_case_naming_strategy.class: JMS\Serializer\Naming\IdenticalPropertyNamingStrategy
    locale: 'en'

    api.versions:
        - 1

    # default env variable for key pair pass phrase:
    env(JWT_SECRET_KEY): '%kernel.project_dir%/config/jwt/private.pem'
    env(JWT_PUBLIC_KEY): '%kernel.project_dir%/config/jwt/public.pem'
    env(JWT_PASSPHRASE): '83492012b312b860cb204460902119ce'

    # default API_KEY value as it is optional and not required
    env(NEWRELIC_API_KEY): CHANGEME

    # apiKey for using the new record form
    env(API_KEY): 2hMT2lR653pWBjy
    venue.api.key: '%env(API_KEY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    api.jwt.event.listener:
        class: App\EventListener\JWTEventListener
        tags:
        - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }
        - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_invalid, method: onJWTInvalid }
        - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_not_found, method: onJWTNotFound }
        - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_expired, method: onJWTExpired }

    encore.standard_package.response_listener:
        class: Encore\StandardPackage\EventListener\ResponseListener
        arguments:
            $reader: '@annotations.cached_reader'
            $serializer: '@jms_serializer.serializer'
        tags:
        - {name: kernel.event_subscriber}
        public: false

    app.repository.product:
        class: App\Repository\ProductRepository
        public: true

    app.repository.venue_booking:
        class: App\Repository\VenueBookingRepository
        public: true
